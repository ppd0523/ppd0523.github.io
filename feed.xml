<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ppd0523.github.io/</id><title>박동현 연구노트</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-08-11T07:48:44+09:00</updated> <author> <name>Park Donghyeon</name> <uri>https://ppd0523.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ppd0523.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://ppd0523.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Park Donghyeon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>DJANGO ORM 중복 제거하기</title><link href="https://ppd0523.github.io/posts/django-orm-remove-duplicates/" rel="alternate" type="text/html" title="DJANGO ORM 중복 제거하기" /><published>2021-08-11T06:00:00+09:00</published> <updated>2021-08-11T07:45:55+09:00</updated> <id>https://ppd0523.github.io/posts/django-orm-remove-duplicates/</id> <content src="https://ppd0523.github.io/posts/django-orm-remove-duplicates/" /> <author> <name>Park Donghyeon</name> </author> <category term="web" /> <category term="backend" /> <summary> 장고에서 중복 데이터를 삭제하는 방법 distinct() : 고유한 쿼리셋 반환 values_list(field1, field2, ...) : 필드만 포함하는 쿼리셋 반환 filter(field1=value1, field2=value2, ...) # create_date가 고유한 queryset 얻기 dates = Price.objects.values_list('create_date', flat=True).distinct() for date in dates: # 중복을 제거할 정보 획득 codes = Price.objects.values_list('stock_code', flat=True).distinct() for code in codes: #... </summary> </entry> <entry><title>Grafana, Kibana, DIY</title><link href="https://ppd0523.github.io/posts/%ED%82%A4%EB%B0%94%EB%82%98-%EA%B7%B8%EB%9D%BC%ED%8C%8C%EB%82%98/" rel="alternate" type="text/html" title="Grafana, Kibana, DIY" /><published>2021-08-04T21:30:00+09:00</published> <updated>2021-08-04T21:30:00+09:00</updated> <id>https://ppd0523.github.io/posts/%ED%82%A4%EB%B0%94%EB%82%98-%EA%B7%B8%EB%9D%BC%ED%8C%8C%EB%82%98/</id> <content src="https://ppd0523.github.io/posts/%ED%82%A4%EB%B0%94%EB%82%98-%EA%B7%B8%EB%9D%BC%ED%8C%8C%EB%82%98/" /> <author> <name>Park Donghyeon</name> </author> <category term="data" /> <category term="visualization" /> <summary> 데이터 시각화를 위해 자료를 찾다보면 꼭 등장하는 것이 두 프레임워크 Kibana(이하 키바나)와 Grafana(이하 그라파나)다. 다른 분야의 개발자들과 얘기하다보면 가끔 등장하는 놈들이라 낯설지 않았는데, 드디어 내 앞에 나타났다. 쓸일 없을 때는 몇 번 읽어봐도 잘 몰랐는데 써야할 일이 생기니까 알게되더라. 어떤놈을 쓰는 것이 내 시각화 작업(주식가격 정보 분석)에 도움이 될지 고려하며 연구해봤다. 역시 백문이 불여일코. Kibana Grafana 쓰면 이런걸 할 수 있다더라. 와우 출처: 파인리포트 출처: https://engineering.linecorp.com/ko/blog/excel-to-elastic/ # Kibana 키바나는 elasticsearch(이하 엘라... </summary> </entry> <entry><title>D3.js data(), enter(), exit() 이해</title><link href="https://ppd0523.github.io/posts/D3-data-enter-exit-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="D3.js data(), enter(), exit() 이해" /><published>2021-07-26T04:00:00+09:00</published> <updated>2021-08-05T05:32:54+09:00</updated> <id>https://ppd0523.github.io/posts/D3-data-enter-exit-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</id> <content src="https://ppd0523.github.io/posts/D3-data-enter-exit-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" /> <author> <name>Park Donghyeon</name> </author> <category term="web" /> <category term="front-end" /> <summary> D3.js를 처음 쓰면 정말 쉽게 데이터를 다룰 수 있다는 것에 놀라고, 조금 더 쓰다보면 생각대로 쓰기 너무 어렵다는 것에 놀란다. 잘 쓰다가 움직이는 차트 만들려니 이렇게 어려운 함수였나 싶어 시행착오를 기록한다. 이 포스팅을 찾아 들어온 사람은 d3.js에 대한 기본적인 이해가 있을 것이라 가정한다. 용어 정의 엘리먼트: DOM을 구성하는 태그 노드: d3 셀렉션이 선택한 객체. 엘리먼트와 데이터로 구성되어 있다. 데이터 업데이트 함수 data enter exit /** * @param data 맵핑할 배열 데이터 * @param key 데이터의 키 값 **/ selection.data([data[, key]]) selection.enter() selec... </summary> </entry> <entry><title>ES6 점 vs 괄호 표기법(Bracket vs Dot notation)</title><link href="https://ppd0523.github.io/posts/Dot-notation-bracket-notation/" rel="alternate" type="text/html" title="ES6 점 vs 괄호 표기법(Bracket vs Dot notation)" /><published>2021-07-22T00:57:00+09:00</published> <updated>2021-07-26T06:45:01+09:00</updated> <id>https://ppd0523.github.io/posts/Dot-notation-bracket-notation/</id> <content src="https://ppd0523.github.io/posts/Dot-notation-bracket-notation/" /> <author> <name>Park Donghyeon</name> </author> <category term="language" /> <category term="grammer" /> <summary> 자바스크립트는 객체의 속성을 추가하는 방법으로 두 가지 점 표기법(dot)과 괄호 표기법(bracket) 두 가지가 있다. 두 방법 다 다른 언어에서 접해봤기 때문에 적당히 이해하면서 쓰고 있다가, 문득 차이가 궁금해 알아보고 글을 남긴다. V8 엔진을 기준으로 합니다 결론. 두 표기법의 차이는 점 표기법은 점 뒤에 오는 변수명(속성명)으로 호출한다. 괄호 표기법은 괄호 안의 값으로 변수명(속성명)을 호출한다. 표기법을 구분하기 전에 속성의 종류를 알아야한다. 무슨 말인지 모르겠다면 아래 예시를 읽어보자. 1. 속성명은 변수명으로 저장 경험상 우리는 자바스크립트 객체의 키값을 변수나 문자열을 쓸 수 있다는 것을 안다. let obj1 = { "hello": "world", ... </summary> </entry> <entry><title>리눅스 계정 비밀번호 초기화</title><link href="https://ppd0523.github.io/posts/%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B3%84%EC%A0%95-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%B4%88%EA%B8%B0%ED%99%94/" rel="alternate" type="text/html" title="리눅스 계정 비밀번호 초기화" /><published>2021-07-14T02:00:00+09:00</published> <updated>2021-07-26T06:45:01+09:00</updated> <id>https://ppd0523.github.io/posts/%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B3%84%EC%A0%95-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%B4%88%EA%B8%B0%ED%99%94/</id> <content src="https://ppd0523.github.io/posts/%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B3%84%EC%A0%95-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%B4%88%EA%B8%B0%ED%99%94/" /> <author> <name>Park Donghyeon</name> </author> <category term="linux" /> <category term="util" /> <summary> 리눅스 계정 비밀번호를 잊어버렸을 경우… 비밀번호를 찾을 수는 없지만 비밀번호를 초기화하고 다시 설정할 수는 있다. 계정이 삭제되는 것이 아님. # root 계정으로 접속 $ passwd -d &amp;lt;user&amp;gt; New password: </summary> </entry> </feed>
